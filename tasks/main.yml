---
- include_vars: "{{ item }}"
  with_first_found:
    - "../vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "../vars/{{ ansible_os_family }}-{{ ansible_distribution_major_version }}.yml"
    - "../vars/{{ ansible_distribution }}.yml"
    - "../vars/{{ ansible_os_family }}.yml"
- name: Setup virtio-win repo
  copy:
    src: virtio-win.repo
    dest: /etc/yum.repos.d/virtio-win.repo
- name: Install some virt tools
  package:
    name:
    - "{{ virt_pkg }}"
    - qemu-kvm
    - libguestfs-tools
    - libguestfs-xfs
    - cloud-utils
    - python-lxml
    - virt-install
    - "{{ python_libvirt_pkg }}"
    - "{{ python_semanage_pkg }}"
    - virtio-win
    - tigervnc
    - virt-manager
- name: Allow virt to use nfs
  seboolean:
    name: virt_use_nfs
    state: yes
    persistent: yes
- name: Start libvirtd
  service:
    name: libvirtd
    enabled: yes
    state: started

- name: Load br_netfilter module
  modprobe:
    name: br_netfilter
    state: present

- name: Load br_netfilter on boot
  copy:
    dest: /etc/modules-load.d/virt.conf
    content: |-
      ### This file is managed by Ansible
      br-netfilter
    owner: root
    group: root
    mode: 0644

- name: Enable net.ipv4.ip_forward in sysctl
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    sysctl_file: /etc/sysctl.d/ipv4-ip_forward.conf
    state: present
    reload: yes

- name: Set bridge-nf-call-{arptables,iptables} to 0
  sysctl:
    name: "{{ item }}"
    state: present
    value: 0
    sysctl_file: /etc/sysctl.d/bridge-nf-call.conf
    reload: yes
  with_items:
    - net.bridge.bridge-nf-call-arptables
    - net.bridge.bridge-nf-call-ip6tables
    - net.bridge.bridge-nf-call-iptables

- name: Allow wheel users to configure libvirt
  copy:
    src: 80-libvirt.rules
    dest: /etc/polkit-1/rules.d/80-libvirt.rules
- name: Setup qemu udev rules
  template:
    src: qemu-udev.rules
    dest: /etc/udev/rules.d/10-qemu-hw-users.rules
- name: Setup qemu memory limits
  copy:
    src: 10-limits-qemu.conf
    dest: /etc/security/limits.d/10-limits-qemu.conf
- name: Run qemu as root
  lineinfile:
    path: /etc/libvirt/qemu.conf
    regexp: '^#?user = "root"'
    line: 'user = "root"'
  when: virt_use_root
- name: Add user to libvirt group
  user:
    append: yes
    name: "{{ local_user }}"
    groups: libvirt
  when: local_user is defined
- name: check if Intel processor
  command: >
    grep -q Intel /proc/cpuinfo
  ignore_errors: true
  register: is_intel
- name: check if AMD processor
  command: >
    grep -q AMD /proc/cpuinfo
  ignore_errors: true
  register: is_amd
- name: Add intel_iommu=on to /etc/default/grub
  lineinfile:
    path: /etc/default/grub
    backup: yes
    regexp: '^GRUB_CMDLINE_LINUX="(.*?\s)?(?:intel_iommu=on )?\s??(.*?)?"$'
    line: 'GRUB_CMDLINE_LINUX="\1intel_iommu=on \2"'
    backrefs: yes
  notify: [ 'Update Boot Image' ]
  when: is_intel.rc == 0
- name: Add amd_iommu=on to /etc/default/grub
  lineinfile:
    path: /etc/default/grub
    backup: yes
    regexp: '^GRUB_CMDLINE_LINUX="(.*?\s)?(?:amd_iommu=on )?\s??(.*?)?"$'
    line: 'GRUB_CMDLINE_LINUX="\1amd_iommu=on \2"'
    backrefs: yes
  notify: [ 'Update Boot Image' ]
  when: is_amd.rc == 0
- name: run virt-host-validate
  command:
    virt-host-validate
  changed_when: false
  when: skip_virt_host_validate is undefined or not skip_virt_host_validate
- include_tasks: net-storage.yml
- name: Define libvirt net
  virt_net:
    state: present
    name: "{{ item.name }}"
    xml: "{{ item.xml }}"
  with_items: "{{ virt_nets }}"
  when: virt_nets is defined
- name: Start libvirt net
  virt_net:
    state: active
    name: "{{ item.name }}"
    autostart: "{{ item.autostart }}"
  with_items: "{{ virt_nets }}"
  when: virt_nets is defined
